.. _vib-simulations:

Проведение вычислительного эксперимента
=======================================

На :numref:`рисунке %s<fig-1>` представлено сравнение точного и
приближенного решений безразмерной модели (impl-3_) с шагами
:math:`\tau=0.1` и :math:`0.5`. Проанализировав графики, мы можем
сделать следующие предположения:

* Похоже, что численное решение корректно передает амплитуду колебаний
  
* Наблюдается погрешность при расчете угловой частоты, которая
  уменьшается при уменьшении шага.
  
* Суммарная погрешность угловой частоты увеличивается со временем.

.. _fig-1:

.. figure:: _images/vib-fig-1.png 

   Эффект от уменьшения шага вдвое


Использование изменяющихся графиков
-----------------------------------

В рассматриваемой нами задаче о колебаниях следует анализировать
поведение системы на больших временных интервалах. Как видно из
предыдущих наблюдений погрешность угловой частоты накапливается и
становится более различимой со временем. Мы можем провести анализ на
большом интервале времени, построив подвижные графики, которые могут
изменяться в течение :math:`p` новых вычисленных периодах
решения. Пакет `SciTools <https://github.com/hplgit/scitools>`__
содержит удобный инструмент для этого: ``MovingPlotWindow``. Ниже
приведена функция, использующая данный инструмент:

.. literalinclude:: codes/vib_undamped.py
   :pyobject: visualize_front

Можно вызывать эту функцию в функции ``main``, если число периодов при
моделировании больше 10. Запуск вычислений для безразмерной
модели (значения, заданные по умолчанию, для аргументов командной
строки ``--U`` и ``--omega`` соответствуют безразмерной модели) для 40
периодов с 20 шагами на период выглядит следующим образом

.. code-block:: text

   Terminal> python vib_undamped.py --dt 0.05 --num_periods 40

Появится окно с движущимся графиком, на котором мы можем видеть
изменение точного и приближенного решений со временем. На этих
графиках мы видим, что погрешность угловой частоты мала в начале
расчета, но становится более заметной со временем.

Создание анимации
-----------------

Стандартные видео форматы
~~~~~~~~~~~~~~~~~~~~~~~~~

Функция ``visualize_front`` сохраняет все графики в файлы с именами:
``tmp_0000.png``, ``tmp_0001.png``, ``tmp_0002.png`` и т.д. Из этих
файлов мы можем создать видео файл, например, в формате ``mpeg4``:

.. code-block:: text

   Terminal> ffmpeg -r 12 -i tmp_%04d.png -c:v libx264 movie.mp4

Программа ``f fmpeg`` имеется в репозитариях Ubuntu. Можно использовать
другие програ ммы для создания видео из набора отдельных графических
файлов. Для г енерации других видео форматов с помощью ``ffmpeg`` можно
использовать  соответствующие кодеки и расширения для выходных файлов:

+--------+------------------------------+
| Формат |      Кодек и имя файла       |
+========+==============================+
| Flash  | ``-c:v flv movie.flv``       |
+--------+------------------------------+
| MP4    | ``-c:v libx264 movie.mp4``   |
+--------+------------------------------+
| WebM   | ``-c:v libx264 movie.mp4``   |
+--------+------------------------------+
| Ogg    | ``-c:v libtheora movie.ogg`` |
+--------+------------------------------+

Видео файл можно проиграть каким-либо видео плейером. Также можно
использовать веб-браузер, создав веб-страницу, содержащую HTML5-тег
``video``:

.. code-block:: html

   <video autoplay loop controls
          width='640' height='365' preload='none'>
   <source src='movie.webm'  type='video/webm; codecs="vp8, vorbis"'>
   </video>

Современные браузеры поддерживают не все видео форматы. MP4 необходим
для просмотра на устройствах Apple, которые используют браузер
Safari. WebM --- предпочтительный формат для Chrome, Opera, Firefox и
IE v9+. Flash был популярен раньше, но старые браузеры, которые
использовали Flash могут проигрывать MP4. Все браузеры, которые
работают с форматом Ogg, могут также воспроизводить WebM. Это
означает, что для того, чтобы видео можно было просмотреть в любом
браузере, это видео должно быть доступно в форматах MP4 и
WebM. Соответствующий HTML код представлен ниже:

.. code-block:: html
   
   <video autoplay loop controls width='640' height='365' preload='none'>
   <source src='movie.mp4'   type='video/mp4; codecs="avc1.42E01E, mp4a.40.2"'> 
   <source src='movie.webm'  type='video/webm; codecs="vp8,	vorbis"'>
   </video>

Формат MP4 должен идти первым для того, чтобы устройства Apple могли
корректно загружать видео.

.. warning::

   Для того, чтобы быть уверенным в том, что отдельные графические
   кадры в итоге показывались в правильном порядке, необходимо
   нумеровать файлы используя нули вначале номера (0000, 0001, 0002 и
   т.д.). Формат ``%04d`` задает отображение целого числа в поле из 4
   символов, заполненном слева нулями. 

Проигрыватель набора PNG файлов в браузере
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Команда ``scitools movie`` может создать видео
проигрыватель для набора PNG так, что можно будет использовать браузер
для просмотра "видео". Преимущество такой реализации в том, что
пользователь может контролировать скорость изменения графиков. Команда
для генерации HTML с проигрывателем набора PNG файлов ``tmp_*.png``
выглядит следующим образом:

.. code-block:: text

   Terminal> scitools movie output_file=vib.html fps=4 tmp_*.png

Параметр ``fps`` управляет скоростью проигрывания видео (*количество
фреймов в секунду*).

Для просмотра видео достаточно загрузить страницу ``vib.html`` в
какой-либо браузер.

Создание анимированных GIF файлов
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Из набора PNG файлов можно также создать анимированный GIF, используя
программу ``convert`` программного пакета |imagemagick_link|:

.. code-block:: text

   convert -delay 25 tmp_vib*.png tmp_vib.gif

Параметр ``delay`` устанавливает задержку между фреймами, измеряемую в
1/100 с, таким образом 4 фрейма в секунду здесь задается задержкой
25/100 с. Отметим, что в нашем случае расчета 40 периодов с шагом
:math:`\tau = 0.05`, процесс создания GIF из большого набора PNG
файлов является ресурсоемким, поэтому такой подход не стоит
использовать. Анимированный GIF может быть подходящим, когда
используется небольшое количество фреймов, нужно анализировать
каждый фрейм и проигрывать видео медленно.


Использование Bokeh для сравнения графиков
------------------------------------------

Вместо динамического изменения графиков, можно использовать средства
для расположения графиков на сетке с помощью мыши. Например, мы можем
расположить четыре периода на графиках, а затем с помощью мыши
прокручивать остальные временные отрезки. Графическая библиотека
|bokeh_link| предоставляет такой инструментарий, но графики должны просматриваться в
браузере. Библиотека имеет отличную документацию, поэтому здесь мы
покажем, как она может использоваться при сравнении набора графиков
функции :math:`u(t)`, соответствующих длительному моделированию.

Допустим, что мы хотим выполнить эксперименты для серии значений
:math:`\tau`. Нам нужно построить совместные графики приближенного и
точного решения для каждого шага :math:`\tau` и расположить их на
сетке:

.. image:: _images/bokeh.png
   
Далее мы можем перемещать мышью кривую в одном графике, в других
кривые будут смещаться автоматически. Пример такого интерактивного
поведения можно увидеть на по следующей ссылке: |bokeh_example|.


Функция, генерирующая html страницу с графиками с использованием
библиотеки Bokeh по заданным спискам массивов ``u`` и соответствующих
массивов ``t`` для различных вариантов расчета, представлена ниже

.. literalinclude:: codes/vib_undamped.py
   :pyobject: bokeh_plot


Приведем также пример использования функции ``bokeh_plot``:

.. literalinclude:: codes/vib_undamped.py
   :pyobject: demo_bokeh


Практический анализ решения
---------------------------

Для колебательной функции, аналогичной представленной на
:numref:`рисунке %s<fig-1>`, мы можем вычислить амплитуду и частоту
(или период) на основе моделирования. Мы пробегаем дискретное
множество точек решения :math:`(t_n, y^n)` и находим все точки
экстремумов. Расстояние между двумя последовательными точками максимума (или
минимума) можно использовать для оценки локального периода, при этом
половина разницы между максимальным и ближайшим к нему минимальным
значениями :math:`y` дают оценку локальной амплитуды.

Локальный максимум --- это точки, где выполнено условие

.. math::

   y^{n-1} < y^n > y^{n+1}, \quad n = 1, 2, \ldots, N.

Аналогично определяются точки локального минимума

.. math::

   y^{n-1} > y^n < y^{n+1}, \quad n = 1, 2, \ldots, N.

Ниже приведена функция определения локальных максимумов и минимумов

.. literalinclude:: codes/vib_empirical_analysis.py
   :pyobject: minmax
   

Два возвращаемых объекта --- списки кортежей.

Пусть :math:`(t_k, e^k)`, :math:`k = 0, 1, \ldots, M-1` ---
последовательность всех :math:`M` точек максимума, где :math:`t_k` ---
момент времени и :math:`e^k` --- соответствующее значение сеточной
функции :math:`y`. Локальный период можно определить как :math:`p_k =
t_{k+1} - t_k`, что на языке Python можно реализовать следующим
образом:

.. literalinclude:: codes/vib_empirical_analysis.py
   :pyobject: periods

Зная минимумы и максимумы, мы можем определить локальные амплитуды
через разницы между соседними точками максимумов и минимумов:

.. literalinclude:: codes/vib_empirical_analysis.py
   :pyobject: amplitudes


Так как ``a[k]`` и ``p[k]`` соответствуют :math:`k` -тым оценкам
амплитуды и периода, соответственно, удобно отобразить графически
зависимость значений ``a`` и ``p`` от индекса ``k``.

При анализе больших временных рядов выгодно вычислять и
визуализировать ``p`` и ``a`` вместо ``y`` для того, чтобы получить
представление о распространении колебаний. Покажем как это сделать для
безразмерной задачи при :math:`\tau = 0.1, 0.5, 0.01`. Пусть заготовлена
следующая функция:

.. literalinclude:: codes/vib_undamped.py
   :pyobject: plot_empirical_freq_and_amplitude

Мы можем написать небольшую программу для создания графиков:

.. literalinclude:: codes/plot_freq.py

На :numref:`рисунке %s<fig-2>` представлен результат работы программы:
очевидно, что уменьшение шага расчета :math:`\tau` существенно
улучшает угловую частоту, при этом амплитуда тоже становиться более
точной. Линии для :math:`\tau = 0.01`, соответствующие 100 шагам на
период, сложно отличить от точных значений.

.. _fig-2:

.. figure:: _images/vib-fig-2.png

   Эмпирические амплитуды и угловые частоты для трех значений
   временного шага
			  
.. _impl-3: ./implementation.html#equation-vib:scaled

.. |bokeh_link| raw:: html

   <a href="http://bokeh.pydata.org" target="blank">Bokeh</a>

.. |bokeh_example| raw:: html

   <a href="_static/bokeh.html" target="blank">Пример работы
   библиотеки Bokeh</a>


.. |imagemagick_link| raw:: html

   <a href="http://www.imagemagick.org" target="blank">ImageMagick</a>
