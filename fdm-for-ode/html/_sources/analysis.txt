Анализ конечно-разной схемы
===========================

Вывод решения конечно-разностной схемы
--------------------------------------

Как мы видели в предыдущем разделе погрешность частоты растет со
временем. Оценим эту погрешность теоретически. Проведем анализ на
основе точного решения дискретной задачи. Разностное уравнение
(fdd-6_) --- однородное с постоянными коэффициентами. Известно, что
такие уравнения имеют решения вида :math:`y^n = c q^n`, где :math:`q`
--- некоторое число, определяемое из разностного уравнения, а
постоянная :math:`c` определяется из начального условия (:math:`c =
U`). Здесь верхний индекс :math:`n` в :math:`y^n` обозначает временной
слой, а в :math:`q^n` --- степень.

Будем искать :math:`q` в виде

.. math::

   q = e^{i\tilde{\omega} t},

и решим задачу относительно :math:`\tilde{\omega}`. Напомним, что
:math:`i = \sqrt{-1}`. Имеем

.. math::

   q^n = e^{\tilde{\omega}\tau n} = e^{i\tilde\omega t} =
   \cos(\tilde\omega t) + i \sin(\tilde\omega t) .

В качестве физически обоснованного численного решения возьмем
действительную часть этого комплексного выражения.

Вычисления дают

.. math::

   y_{\bar{t}t}^n &= \frac{y^{n+1} - 2 y^n + y^{n-1}}{\tau^2} =
   U \frac{q^{n+1} - 2q^{n} + q^{n-1}}{\tau^2} \\
   & = \frac{U}{\tau^2} \left( e^{i(\tilde{\omega}t+\tau)}
   -2e^{i(\tilde{\omega}t)} + e^{i(\tilde{\omega}t-\tau)}\right) =
   U e^{i(\tilde{\omega}t)} \frac{1}{\tau^2}
   \left( e^{i\tau} + e^{-i\tau} - 2 \right) \\
   &= U e^{i(\tilde{\omega}t)} \frac{2}{\tau^2}
   \left( \cos(\tilde{\omega}\tau) - 1 \right) =
   - U e^{i(\tilde{\omega}t)} \frac{4}{\tau^2}
   \sin^2\left( \frac{\tilde{\omega}\tau}{2} \right)

Подставляя :math:`y^n = U e^{\tilde{\omega}\tau n}` в (fdd-6_) и
учитывая последнее выражение, получим

.. math::

   - U e^{i(\tilde{\omega}t)} \frac{4}{\tau^2}
   \sin^2\left( \frac{\tilde{\omega}\tau}{2} \right) + \omega^2 U
   e^{i(\tilde{\omega}t)} = 0.

Разделив последнее выражение на :math:`U e^{i(\tilde{\omega}t)}`,
получим

.. math::

   \frac{4}{\tau^2} \sin^2\left( \frac{\tilde{\omega}\tau}{2} \right)
   = \omega^2.

Отсюда

.. math::

   \sin^2\left( \frac{\tilde{\omega}\tau}{2} \right) =
   \left( \frac{\omega\tau}{2} \right)^2

и, следовательно, имеем

.. math::
   \tilde{\omega} = \pm \frac{2}{\tau}
   \arcsin\left(\frac{\omega\tau}{2}\right).
   :label: vibr:omega:appr

Из :eq:`vibr:omega:appr` видно, что численная частота
:math:`\tilde\omega` никогда не равна точной :math:`\omega`. Для того,
чтобы понять насколько хороша аппроксимация :eq:`vibr:omega:appr`,
используем разложение в ряд Тейлора для малых :math:`\tau`:

.. code-block:: python

   >>> from sympy import *
   >>> tau, omega = symbols('tau omega')
   >>> omega_tilde_e = 2/tau*asin(omega*tau/2)
   >>> omega_tilde_series = w_tilde_e.series(tau, 0, 4)
   >>> print omega_tilde_series
   omega + tau**2*omega**3/24 + O(tau**4)

Таким образом, имеем

.. math::
   \tilde{\omega} = \omega \left( 1 + \frac{1}{24} \omega^2\tau^2
   \right) + \mathcal{O}(\tau^4).
   :label: vibr:omega:exp


Погрешность численного значения частоты имеет второй порядок по
:math:`\tau` и стремится к нулю при :math:`\tau\to 0`. Из
:eq:`vibr:omega:exp` видно, что :math:`\tilde\omega > \omega`, так как
слагаемое :math:`\omega^3\tau/24 > 0`. Это слагаемое вносит наибольший
вклад в погрешность. Слишком большая численная частота дает слишком
быстро колеблющийся профиль и, таким образом, решение как бы
запаздывает, это хорошо видно в левой части :numref:`рисунка
%s<fig-1>`.

На :numref:`рисунке %s<fig-3>` представлены графики дискретной частоты
вычисленной по :eq:`vibr:omega:appr` и ее приближения
:eq:`vibr:omega:exp` для :math:`\omega = 1`.

.. _fig-3:

.. figure:: _images/discrete_freq.png
   :width: 400pt

   Точная дискретная частота и ее разложение в ряд второго порядка

Точное дискретное решение
-------------------------

Возможно, чем то, что :math:`\tilde\omega = \omega +
\mathcal{O}(\tau^2)`, результат заключается в том, что мы нашли точное
дискретное решение задачи:

.. math::
   y^n = U \cos(\tilde\omega \tau n), \quad \tilde\omega =
   \frac{2}{\tau} \arcsin \left(\frac{\omega\tau}{2} \right).
   :label: vibr:exact:discrete

Теперь мы можем вычислить сеточную функцию погрешности:

.. math::
   e^n = u_e(t_n) - u^n = U \cos(\omega\tau n) - U
   \cos(\tilde\omega\tau n) = -2 U \sin\left( \frac{t}{2} (\omega -
   \tilde\omega) \right) \sin\left( \frac{t}{2} (\omega +
   \tilde\omega) \right).
   :label: vibr:error

Построенная сеточная функция погрешности идеальна для целей
тестирования поэтому необходимо реализовать тест на основе
:eq:`vibr:exact:discrete`, выполнив :ref:`упражнение 2<Exercise-vibr-exact-discrete>`. 

Сходимость
----------

Для того, чтобы показать, что приближенное решение сходится к точному,
т.е. :math:`e^n \ to 0` при :math:`\tau \to 0`, воспользуемся
:eq:`vibr:omega:appr`:

.. math::
   \lim_{\tau \to 0} = \lim_{\tau\to 0} \frac{2}{\tau} \arcsin \left(
   \frac{\omega \tau}{2} \right) = \omega.

Это можно проверить, например, с помощью ``sympy``:

.. code-block:: python

   >>> import sympy as sym
   >>> tau, omega = sym.symbols('tau omega')
   >>> sym.limit((2/tau)*sym.asin(omega*tau/2),tau,0,dir='+')
   omega


Глобальная погрешность
----------------------

Проведем анализ глобальной погрешности. Разложим сеточную функцию
погрешности :eq:`vibr:error`. Воспользуемся для этого пакетом
``sympy``:

.. code-block:: python

   >>> from sympy import *
   >>> omega_tilde_e = 2/tau*asin(omega*tau/2)
   >>> omega_tilde_series = omega_tilde_e.series(tau, 0, 4)
   >>> omega_tilde_series
   omega + omega**3*tau**2/24 + O(tau**4)

Можно использовать команду ``removeO()``, чтобы избавиться от
слагаемого ``O()``:

.. code-block:: python

   >>> omega_tilde_series = omega_tilde_series.removeO()
   >>> omega_tilde_series
   omega**3*tau**2/24 + omega


Используя выражение для :math:`\tilde\omega` и разлагая погрешность в
ряд, получим

.. code-block:: python

   >>> error = cos(omega*t) - cos(omega_tilde_series*t)
   >>> error.series(tau, 0, 6)
   omega**3*t*tau**2*sin(omega*t)/24 + omega**6*t**2*tau**4*cos(omega*t)/1152 + O(tau**6)


Так как нас интересует главное слагаемое в разложении (слагаемое с
наименьшей степенью :math:`\tau`), воспользуемся методом
``.as_leading_term(tau)``, чтобы выделить это слагаемое:

.. code-block:: python

   >>> error.series(tau, 0, 6).as_leading_term(tau)
   omega**3*t*tau**2*sin(omega*t)/24

Последний результат означает, что глобальная погрешность в точке
:math:`t` пропорциональна :math:`\omega^3 t \tau`. Учитывая, что
:math:`t = n\tau` и :math:`\sin(\omega t) \leq 1`, получим

.. math::
   e^n = \frac{1}{24} n \omega^3 \tau^3.

Это главный член погрешности *в точке*.

Нас интересует накапливаемая глобальная оценка погрешности, которую
можно вычислить как :math:`\ell^2` норму погрешности :math:`e^n`:

.. math::

   \| e^n \|_2^2 = \tau \sum_{n=0}^{N} \frac{1}{24^2} n^2 \omega^6
   \tau^6 = \frac{1}{24^2} \tau^7 \sum_{n=0}^{N} n^2.

Сумма :math:`\sum_{n=0}^{N} n^2` примерно равен :math:`\frac{1}{3}
N^3`. Заменяя :math:`N` на :math:`T/\tau`, получим

.. math::
   \| e^n \|_2 = \frac{1}{24} \sqrt{\frac{T^3}{3}} \omega^3 \tau^2.

Таким образом, мы получили, что глобальная (интегральная) погрешность
также пропорциональна :math:`\tau^2`.

Устойчивость
------------

Как мы помним численное решение имело правильную постоянную амплитуду,
но ошибку в частоте. Однако, постоянная амплитуда бывает не
всегда. Отметим, что если :math:`\tau` достаточно большая величина,
величина аргумента функции :math:`\arcsin` в :eq:`vibr:omega:exp`
может быть больше 1, т.е. :math:`\omega\tau/2 > 1`. В этом случае
:math:`\arcsin(\omega\tau/2)` и, следовательно, :math:`\tilde\omega`
являются комплексными:

.. code-block:: python

   >>> omega = 1.
   >>> tau = 3
   >>> asin(omega*tau/2)
   1.5707963267949 - 0.962423650119207*I

Пусть :math:`\tilde\omega = \tilde\omega_r + i\tilde\omega_i`. Так как
:math:`\arcsin(x)` имеет отрицательную мнимую часть при :math:`x > 1`,
:math:`\tilde\omega_i < 0`, то :math:`e^{i\tilde\omega t} = e^{-\tilde\omega t} e^{i\tilde\omega t}`,
что означает экспоненциальный рост со временем, так как
:math:`e^{-\tilde\omega t}` при :math:`\tilde\omega < 0` имеет
положительную степень.

.. index:: Условие устойчивости

.. admonition:: Условие устойчивости

   Мы должны исключить рост амплитуды, потому что такой рост
   отсутствует в точном решении. Таким образом, мы должны наложить
   *условие устойчивости*: аргумент арксинуса должен давать
   действительное значение :math:`\tilde\omega`. Условие устойчивости
   выглядит следующим образом:

   .. math::
	  \frac{\omega\tau}{2} \leq 1 \rightarrow \tau \leq  \frac{2}{\omega}.
	  :label: vibr:stab:cond
	  

Возьмем :math:`\omega = 2\pi` и выберем :math:`\tau > \pi^{-1} = 0.3183098861837907`. 
На :numref:`рисунке %s<fig-4>` представлен результат расчета при
:math:`\tau = 0.3184`, которое незначительно отличается от
критического значения: :math:`\tau = \pi^{-1} + 9.01\cdot 10^{-5}`.

.. _fig-4:

.. figure:: _images/unstability.png
   :width: 400pt

   Неустойчивое решение

О точности при границе устойчивости
-----------------------------------

Ограничение на временной шаг :math:`\tau < 2/\omega` кажется
неудачным. Хотелось бы использовать больший шаг для расчета, чтобы
ускорить его. При граничном значении шага из условия устойчивости
имеем :math:`\arcsin(\omega\tau/2) = \arcsin(1) = \pi/2` и,
следовательно, :math:`\tilde\omega = \pi/\tau`. Соответствующий период
численного решения :math:`\tilde{P} = 2\pi/\tilde{\omega} = 2/\tau`,
которое означает, что экстремумы численного решения находятся на
расстоянии одного временного шага. Это самая короткая волна, которую
можно воспроизвести на сетке. Другими словами, нет необходимости
использовать больший, чем задан ограничением, шаг по времени при
счете.

Кроме того, мы видим при счете, что ошибка угловой частоты
существенна: на :numref:`рисунке %s<fig-5>` показаны приближенное и
точное решения при :math:`\omega=2\pi` и
:math:`\tau=2/\omega=\pi^{-1}`. Уже после одного периода у численного
решения наблюдается минимум там, где у точного максимум. Погрешность в
частоте при :math:`\tau` выбирается на границе устойчивости равна:
:math:`\omega - \tilde\omega = \omega(1 - \pi/2) \approx
-0.57\omega`. Соответствующая погрешность периода:
:math:`P - \tilde{P} \approx 0.36P`. После :math:`m` периодов
погрешность становиться уже :math:`0.36 m P`. Эта ошибка достигает
половины периода при :math:`m = 1/(2\cdot 0.36) \approx 1.38`, что
теоретически объясняет результаты расчета, представленные на
:numref:`рисунке %s<fig-5>`. Следовательно, временной шаг :math:`\tau`
следует выбирать как можно меньшим, чтобы добиться поддающихся
интерпретации результатов. 

.. _fig-5:

.. figure:: _images/exact_tau.png
   :width: 400pt
			
   Численное решение при :math:`\tau = 2/\omega`.

.. admonition:: Краткие выводы

   1. Ключевой параметр в формулах :math:`p=\omega\tau`.
      Пусть период колебаний :math:`P=2\pi/\omega`, количество
      временных шагов на период :math:`N_P = P/\tau`. Тогда :math:`p =
      \omega\tau = 2\pi N_P`, т.е. основным параметром является
      количество временных шагов на период. Наименьшее возможное
      :math:`N_P = 2`, т.е. :math:`p \in (0, \pi]`.
   
   2. Если :math:`p \leq 2`, то амплитуда численного решения
      постоянна.
   
   3. Отношение численной угловой частоты к точной есть
      :math:`\tilde{\omega}/\omega \approx 1 +
      \frac{p^2}{24}`. Погрешность :math:`\frac{p^2}{24}` приводит к
      смещенным пикам численного решения, и это погрешность
      расположения пиков растет линейно со временем.


		   
.. _fdd-6: ./fdd.html#equation-vibr:efds:rec
