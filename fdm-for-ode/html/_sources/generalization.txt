Обобщения: затухание, нелинейные струны и внешние воздействия
=============================================================

Рассмотрим обобщение задачи, рассмотренной в разделе
:ref:`Конечно-разностная дискретизация<vibr-fdd>`, учитывающее
возможные затухание :math:`f(u')`, нелинейную пружину (или
сопротивление) :math:`s(u)` и некоторое внешнее воздействие
:math:`F(t)`: 

.. math::
   m u'' + f(u') + s(u) = F(t), \quad t \in (0, T], \quad u(0) = U,
   \quad u'(0) = V.
   :label: vibr:general

Здесь :math:`m, f(u'), s(u), F(t), U, V` и :math:`T` --- входные
параметры.

Будем рассматривать два основных типа затуханий (силы трения):
линейное :math:`f(u') = b u'` и квадратичное :math:`f(u') =
bu'|u'|`. Пружинные системы часто характеризуются линейным затуханием,
при этом сопротивление воздуха описывается квадратичным
затуханием. Сила сжатие пружины часто линейны: :math:`s(u) = cu`,
однако бывают и нелинейными, наиболее известный пример --- силы
тяжести, действующие на маятник, которые описываются нелинейным
слагаемым :math:`s(u) \sim \sin(u)`.

Разностная схема для линейного затухания
----------------------------------------

Для приближенного решения уравнения :eq:`vibr:general` в случае
линейного затухания будем использовать следующую разностную схему:

.. math::
   m y_{\bar{t}t}^n + b y_{\mathring{t}}^n + s(y^n) = F^n, \quad n =
   1, 2, \ldots, N-1, \quad y^0 = U, \quad y_{\mathring{t}}^0 =
   \frac{y^1 - y^{-1}}{2\tau} = V.
   :label: vibr:gen:fd

Перепишем задачу :eq:`vibr:gen:fd` в индексной форме:

.. math::
   m\frac{y^{n+1} - 2y^n +y^{n-1}}{\tau^2} + b\frac{y^{n+1} -
   y^{n-1}}{2\tau} + s(y^n) = F^n, \quad n = 1, 2, \ldots, N - 1, \quad
   y^0 = U, \quad \frac{y^1 - y^{-1}}{2\tau} = V.
   :label: vibr:gen:fd:idx
   
Решая разностное уравнение :eq:`vibr:gen:fd:idx` относительно неизвестной
:math:`y^{n+1}`, получим следующую рекуррентную формулу:

.. math::
   y^{n+1} = \frac{2m y^n + (0.5\tau - m)y^{n-1} + \tau^2(F^n -
   s(y^n))}{m + 0.5b\tau}, \quad n = 1, 2, \ldots, N-1.
   :label: vibr:gen:fd:yn

При :math:`n=0` с учетом второго начального условия имеем

.. math::
   y^1 = y^0 + \tau V + \frac{\tau^2}{2m} (F^0 - s(y^0) - b V).
   :label: vibr:gen:fd:y1

Разностная схема для квадратичного затухания
--------------------------------------------

Пусть :math:`f(u') = b u'|u'|`. Аппроксимацию :math:`f(u')` выполним,
основываясь на использовании геометрического среднего:

.. math::
   (w^2)^n \approx w^{n-1/2}w^{n+1/2},

где :math:`w` --- некоторая сеточная функция. Погрешность при
использовании геометрического среднего имеет порядок
:math:`O(\tau^2)`, такой же как и при аппроксимации второй
производной. При :math:`w = u'` имеем

.. math::
   (u'|u'|)^n \approx u'(t_{n+1/2}) |u'(t_{n-1/2})|.

Для аппроксимации :math:`u'` в точках :math:`t_{n\pm 1}` воспользуемся
направленными разностями, которые имеют второй порядок аппроксимации
относительно полуцелых точек:

.. math::
   u'(t_{n+1/2}) \approx \frac{y^{n+1} - y^{n}}{\tau} = y_t^n, \quad
   u'(t_{n-1/2}) \approx \frac{y^{n} - y^{n-1}}{\tau} = y_{\bar{t}}^n.

Таким образом, получим разностное уравнение

.. math::
   m y_{\bar{t}t}^n + by_t^n y_{\bar{t}}^n + s(y^n) = F^n, \quad n =
   1, 2, \ldots, N - 1,
   :label: vibr:gen:fd:quad
   
которая является линейной относительно :math:`y^{n+1}`:

.. math::
   y^{n+1} = \frac{2m y^n - m y^{n-1} + by^n |y^n - y^{n-1}| +
   \tau^2(F^n - s(y^n))}{m + b|y^{n} - y^{n-1}|}.
   :label: vibr:gen:fd:quad:yn

При использовании аппроксимации второго начального условия из
:eq:`vibr:gen:fd` мы получим сложное нелинейное выражение для
:math:`y^1`. Однако, можно построить аппроксимацию первого начального,
линейную относительно :math:`y^1`. Для :math:`t = 0` имеем
:math:`u'(0)|u'(0)| = b V|V|`. Используя это выражение в уравнении
:eq:`vibr:gen:fd:quad` и значение :math:`u(0) = U` при аппроксимации
уравнения :eq:`vibr:general`, записанного при :math:`t = 0`, получим 

.. math::
   m y_{\bar{t}t}^1 + b V|V| + s(U) = F^0.

Отсюда, учитывая второе начальное условие из :eq:`vibr:gen:fd`,
получим выражение для вычисления :math:`y^1`

.. math::
   y^1 = y^0 + \tau V + \frac{\tau^2}{2m} (F^0 - m V|V| - s(U)).
   :label: vibr:gen:fd:quad:y1

Программная реализация
----------------------

Алгоритмы для линейного и квадратичного затуханий, построенные в
предыдущих разделах, аналогичны алгоритму для незатухающей
модели. Отличие только в формулах для :math:`y^1` и :math:`y^{n+1}`.

Таким образом, для приближенного решения задачи необходимо выполнить
следующие шаги:

1. :math:`y^0 = U`;
2. вычисляем :math:`y^1`, используя :eq:`vibr:gen:fd:y1` для
   линейного затухания или :eq:`vibr:gen:fd:quad:y1` для квадратичного
   затухания;
3. для :math:`n = 1, 2, \ldots, N-1`:
   
   1. вычисляем :math:`y^{n+1}`, используя :eq:`vibr:gen:fd:yn` для линейного затухания или :eq:`vibr:gen:fd:quad:yn` для квадратичного затухания. 

Соответствующая функция ``solver`` представлена ниже:

.. literalinclude:: codes/vib.py
   :pyobject: solver


Верификация реализации алгоритма
--------------------------------

Постоянное решение
~~~~~~~~~~~~~~~~~~

Для отладки и начальной верификации часто полезно использовать
постоянное решение. Выбор :math:`u_e(t) = U` дает
:math:`V=0`. Подставляя в уравнение, получим :math:`F(t) = s(U)` при
любом выборе функции :math:`f`. Так как разностная производная от
константы равна нулю, то постоянное решение удовлетворяет также
разностному уравнению. Следовательно, константа должна
воспроизводиться с машинной точностью. Этот тест реализован в функции

.. literalinclude:: codes/vib.py
   :pyobject: test_constant


Линейное решение
~~~~~~~~~~~~~~~~

Теперь в качестве тестового решения выберем линейную функцию:
:math:`u_e(t) = ct + d`. Начальное условие :math:`u(0) = U` дает
:math:`d = U`, а из второго начального условия :math:`u'(0) = V`
получим, что :math:`c = V`. Подставляя :math:`u_e(t) = Vt + U` в
уравнение с линейным затуханием, имеем

.. math::
   0 + bV + s(Vt + U) = F(t),

а для квадратичного затухания:

.. math::
   0 + bV|V| + s(Vt + U) = F(t).

Так как все разностные аппроксимации используемые для :math:`u'` точны
для линейных функций, то линейная функция :math:`u_e` также является
решением разностной задачи.

Квадратичное решение
~~~~~~~~~~~~~~~~~~~~

Функция :math:`u_e(t) = bt^2 + Vt + U` с произвольной постоянной
:math:`b` удовлетворяет начальным данным и уравнению с соответствующим
выбором :math:`F(t)`. Такая функция является также решением
разностного уравнения с линейным затуханием. Однако, полином второй
степени от :math:`t` не удовлетворяет разностному уравнению в случае
квадратичного затухания.

Выполните :ref:`упражнение 3<Exercise-vibr-lin-quad>`
