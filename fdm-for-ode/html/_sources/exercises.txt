Упражнения и задачи
===================

.. _Exercises:

Упражнения
----------

.. _Exercise-vibr-init-alt:

.. -- begin exercise 1 --

.. topic:: Упражнение 1: Использование ряда Тейлора для вычисления :math:`y^1`

		Альтернативный способ вывода (fdd-7_) для
		вычисления :math:`y^1` заключается в использовании следующего
		ряда Тейлора:

		.. math::
		   u(t_1) \approx u(0) + \tau u'(0) + \frac{\tau}{2} u''(0) +
		   O(\tau^3)

		Используя уравнение (fdd-1_)  и начальное условие для
		производной :math:`u'(0) = 0`, покажите, что такой способ
		также приведет к (fdd-7_). Более общее условие
		для :math:`u'(0)` имеет вид :math:`u'(0) = V`. Получите
		формулу для вычисления :math:`y^1` двумя способами.

.. ------------

.. _Exercise-vibr-exact-discrete:

.. -- begin exercise 2 --

.. topic:: Упражнение 2: Использование точного дискретного решения для
		   тестирования

   Написать тестовую функцию в отдельном файле, которая использует
   точное дискретное решение (analysis-3_) для проверки реализации функции
   ``solver``. 

.. ------------

.. _Exercise-vibr-lin-quad:

.. -- begin exercise 3 --

.. topic:: Упражнение 3: Использование линейной и квадратичной функций
		   для тестирования

   Упражнение является обобщением :ref:`задачи
   1<Problem-linear-quadratic-verification>` на расширенную задачу
   (general-1_) на случаи, когда затухание линейное или
   квадратичное. Решите несколько подзадач и посмотрите как меняются
   результаты и настройки программы для случаев разных затуханий. При
   модификации кода из :ref:`задачи
   1<Problem-linear-quadratic-verification>`, используйте ``sympy``,
   который выполнит основную часть работы для анализа обобщенной задачи.

.. ------------
   
.. _Problems:
   
Задачи
------

.. _Problem-linear-quadratic-verification:

.. -- begin problem 1 --

.. topic:: Задача 1: Использование линейной и квадратичной функций
		   для тестирования

		   Рассмотрим задачу для ОДУ:

		   .. math::
			  u'' + \omega^2 u = f(t), \quad u(0) = U,
			  \quad u'(0) = V, \quad t \in (0, T].

		   Аппроксимируем уравнение разностной схемой
		   :math:`y_{\bar{t}t}^n + \omega^2 y^n = f^n`.

		   1. Вывести уравнение для нахождения приближенного решения
		      :math:`y^1` на первом временном шаге.

		   2. Для тестирования реализации алгоритма воспользуемся методом пробных функций. Выберем :math:`u_e(t) = ct + d`.  Найти :math:`c` и :math:`d` из начальных условий. Вычислить соответствующую функцию источника :math:`f`. Покажите, что :math:`u_e` является точным решением соответствующей разностной схемы. 

		   3. Используйте ``sympy`` для выполнения символьных вычислений из пункта 2. Ниже представлен каркас такой программы: 

			  .. literalinclude:: codes/vib_undamped_verify.py
				 :lines: 3-
				 :language: python

.. ---------------------

.. _fdd-1: ./fdd.html#equation-vibr
.. _fdd-7: ./fdd.html#equation-vibr:efds:init:1
.. _analysis-3: ./analysis.html#equation-vibr:exact:discrete
.. _general-1: ./generalization.html#equation-vibr:general
